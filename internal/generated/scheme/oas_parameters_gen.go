// Code generated by ogen, DO NOT EDIT.

package scheme

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// UserGetIDGetParams is parameters of GET /user/get/{id} operation.
type UserGetIDGetParams struct {
	// Идентификатор пользователя.
	ID UserId
}

func unpackUserGetIDGetParams(packed middleware.Parameters) (params UserGetIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(UserId)
	}
	return params
}

func decodeUserGetIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params UserGetIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = UserId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UserSearchGetParams is parameters of GET /user/search operation.
type UserSearchGetParams struct {
	// Условие поиска по имени.
	FirstName string
	// Условие поиска по фамилии.
	LastName string
}

func unpackUserSearchGetParams(packed middleware.Parameters) (params UserSearchGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "first_name",
			In:   "query",
		}
		params.FirstName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "last_name",
			In:   "query",
		}
		params.LastName = packed[key].(string)
	}
	return params
}

func decodeUserSearchGetParams(args [0]string, argsEscaped bool, r *http.Request) (params UserSearchGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: first_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "first_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FirstName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "first_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: last_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "last_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LastName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "last_name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
